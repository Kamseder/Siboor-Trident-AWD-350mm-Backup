# Macros to Calibrate the Printer which do Movements

#####################################################################
#  Homing Override 
##################################################################### 
# Homing Override To Home Y First before Home X to prevent Toolhead from crashing into Front Steppers
[homing_override]
axes: z                                                              # Override homing for the Z axis only
set_position_z: 0                                                    # Set the Z position to 0 after homing
gcode:
    SET_DISPLAY_TEXT MSG="Homing..."                                 # Display Message
    G90                                                              # Set to absolute positioning mode
    G0 Z15 F3000                                                     # Move Z axis to 10mm above the bed at 3000 mm/min
    G28 Y                                                            # Home Y axis
    G28 X                                                            # Home X axis
    G1 X175 Y175 F7200                                               # Move to a specific coordinate (175, 175) at 7200 mm/min
    G28 Z                                                            # Home Z axis again
    G0 Z30 F3000

#####################################################################
#  Belt Calibrate 
##################################################################### 
# Move to Calibration Point
[gcode_macro BELT_CALIBRATE]
description: Move to Calibration Point
gcode:
    # Homing Printer
    {% if "xyz" not in printer.toolhead.homed_axes %}
        SET_DISPLAY_TEXT MSG="Homing..."                             # Display Message
        G28                                                          # Homing all axes (if needed)	
    {% endif %}

    # Move Toolhead to Calibration Point
    SET_DISPLAY_TEXT MSG=" Move Toolhead to Calibration Point..."    # Display Message
    G0 Y111                                                          # Move Toolhead to Calibration Point
    M84                                                              # Disable Steppers


#####################################################################
#  Clean Nozzle 
##################################################################### 
[gcode_macro CLEAN_NOZZLE]
description: Cleaning the Nozzle 
variable_start_x: 271                                                # starting position - offset a bit to the right from the brush
variable_start_y: 354                                               # starting Y position - offset a bit to the front of the brush XOL
#variable_start_y: 344                                                # starting Y position - offset a bit to the front of the brush REAPER
variable_start_z: 5                                                  # starting Z height. This should barely touch the surface of the brush
variable_x_min: 229                                                  # left side of the brush 
variable_x_max: 266                                                  # right side of the brush
variable_y_min: 354                                                 # front side of the brush - make sure the nozzle is over the last line of bristles XOL
variable_y_max: 359                                                 # rear side of the brush - make sure the nozzle is over the first line of bristles XOL
#variable_y_min: 344                                                  # front side of the brush - make sure the nozzle is over the last line of bristles REAPER
#variable_y_max: 351                                                  # rear side of the brush - make sure the nozzle is over the first line of bristles REAPER
variable_z1: 4.5                                                     # second z height of the nozzle over the brush - this should be with the nozzle slightly sunk in
variable_z2: 4                                                       # third z height of the nozzle over the brush - this should be with the nozzle fully sunk into the brush, but not touching the bottom of it.
variable_wipe_qty: 1                                                 # how many times to run the cleaning sequence
variable_wipe_spd: 200                                               # cleaning speed
variable_raise_distance: 15                                          # z height after cleaning is done
gcode:  
    # Homing Printer
    {% if "xyz" not in printer.toolhead.homed_axes %}
        SET_DISPLAY_TEXT MSG="Homing..."                             # Display Message
        G28                                                          # Homing all axes (if needed)	
    {% endif %}

    SET_DISPLAY_TEXT MSG="Cleaning Nozzle..."                        # Display Message
    
    # Move nozzle to start position
    G1 Z{raise_distance}
    G1 X{start_x} Y{start_y} F9000
    G1 X{x_max} Y{y_min} F9000
    G1 Z{start_z} F1500

    # Wipe nozzle left and right
    {% for wipes in range(1, (wipe_qty + 1)) %}
    
        # Wipe nozzle left and right barely
        # Front Side
        G1 Y{y_min} F{wipe_spd * 60}
        G1 X{x_min} F{wipe_spd * 60}
        G1 X{x_max} F{wipe_spd * 60}
        # Back Side
        G1 Y{y_max} F{wipe_spd * 60}
        G1 X{x_min} F{wipe_spd * 60}
        G1 X{x_max} F{wipe_spd * 60}

        # Wipe nozzle left and right slightly
        G1 Z{z1} F1500
        # Front Side
        G1 Y{y_min} F{wipe_spd * 60}
        G1 X{x_min} F{wipe_spd * 60}
        G1 X{x_max} F{wipe_spd * 60}
        # Back Side
        G1 Y{y_max} F{wipe_spd * 60}
        G1 X{x_min} F{wipe_spd * 60}
        G1 X{x_max} F{wipe_spd * 60}

        # Wipe nozzle left and right fully
        G1 Z{z2} F1500
        # Front Side
        G1 Y{y_min} F{wipe_spd * 60}
        G1 X{x_min} F{wipe_spd * 60}
        G1 X{x_max} F{wipe_spd * 60}
        # Back Side
        G1 Y{y_max} F{wipe_spd * 60}
        G1 X{x_min} F{wipe_spd * 60}
        G1 X{x_max} F{wipe_spd * 60}

        # Move up nozzle to barely
        G1 Z{start_z} F1500
    {% endfor %}

    # Wipe nozzle diagonally
    {% for wipes in range(1, (wipe_qty + 1)) %}

        # Wipe nozzle diagonally barely
        G1 Z{start_z} F1500
        G1 X{x_min} Y{y_min} F{wipe_spd * 60}
        G1 X{x_max} Y{y_max} F{wipe_spd * 60}
        G1 X{x_min} Y{y_min} F{wipe_spd * 60}
        G1 X{x_max} Y{y_max} F{wipe_spd * 60}
        G1 X{x_min} Y{y_max} F{wipe_spd * 60}
        G1 X{x_max} Y{y_min} F{wipe_spd * 60}
        G1 X{x_min} Y{y_max} F{wipe_spd * 60}
        G1 X{x_max} Y{y_min} F{wipe_spd * 60}

        # Wipe nozzle diagonally slightly
        G1 Z{z1} F1500
        G1 X{x_min} Y{y_min} F{wipe_spd * 60}
        G1 X{x_max} Y{y_max} F{wipe_spd * 60}
        G1 X{x_min} Y{y_min} F{wipe_spd * 60}
        G1 X{x_max} Y{y_max} F{wipe_spd * 60}
        G1 X{x_min} Y{y_max} F{wipe_spd * 60}
        G1 X{x_max} Y{y_min} F{wipe_spd * 60}
        G1 X{x_min} Y{y_max} F{wipe_spd * 60}
        G1 X{x_max} Y{y_min} F{wipe_spd * 60}
    
        # Wipe nozzle diagonally fully
        G1 Z{z2} F1500
        G1 X{x_min} Y{y_min} F{wipe_spd * 60}
        G1 X{x_max} Y{y_max} F{wipe_spd * 60}
        G1 X{x_min} Y{y_min} F{wipe_spd * 60}
        G1 X{x_max} Y{y_max} F{wipe_spd * 60}    
        G1 X{x_min} Y{y_max} F{wipe_spd * 60}
        G1 X{x_max} Y{y_min} F{wipe_spd * 60}
        G1 X{x_min} Y{y_max} F{wipe_spd * 60}
        G1 X{x_max} Y{y_min} F{wipe_spd * 60}

        # Move up nozzle to barely
        G1 Z{start_z} F1500
    {% endfor %}

    # Go back to starting position
    G1 X{start_x} Y{start_y} F9000 
    # Raise nozzle
    G1 Z{raise_distance} 

    
#####################################################################
#  Z Tilt Adjust 
#####################################################################   
# IDM/Cartographer optimized 3Z leveling macro
[gcode_macro Z_TILT_ADJUST]  
description: Z Tilt Adjustment
rename_existing: _Z_TILT_ADJUST
gcode:
    SAVE_GCODE_STATE NAME=STATE_Z_TILT                               # Save current state for Z_tilt adjustment
    BED_MESH_CLEAR                                                   # Clear Bed Mesh
    {% if not printer.z_tilt.applied %}                              # If no z_tilt set
        _Z_TILT_ADJUST horizontal_move_z=10 retry_tolerance=1        # Adjust Z tilt with higher tolerance initially
    {% endif %}
    _Z_TILT_ADJUST horizontal_move_z=2                               # Fine-tune Z tilt adjustment
    RESTORE_GCODE_STATE NAME=STATE_Z_TILT                            # Restore saved state after adjustment
    G28 Z                                                            # Home Z again after Z_TILT_ADJUST


#####################################################################
#  Mesure Backlash 
#####################################################################  
[gcode_macro CARTO_MEASURE_PLANARBACKLASH]
description: Calibrate backlash at each corner
gcode:
  {% if printer.toolhead.homed_axes != "xyz" %}
    { action_raise_error("Printer not homed!"   ) } {% endif %}
  {% if printer.configfile.settings.scanner is not defined   %}
    { action_raise_error("[Scanner] not found!" ) } {% endif %}
  {% if printer.configfile.config.bed_mesh.zero_reference_position is not defined %}
    { action_raise_error("zero_reference_position not found!")} {% endif %}
    
  {% if printer.configfile.settings.z_tilt is defined %}
    {% set planeCfg = "z_tilt"        %}
    {% set planeCMD = "Z_TILT_ADJUST" %}
  {% elif printer.configfile.settings.quad_gantry_level is defined %} 
    {% set planeCfg = "quad_gantry_level" %}
    {% set planeCMD = "QUAD_GANTRY_LEVEL" %}
  {% elif printer.configfile.settings.z_tilt_ng is defined %}
    {% set planeCfg = "z_tilt_ng"     %}
    {% set planeCMD = "Z_TILT_ADJUST" %}
  {% else %}
    { action_raise_error("This printer has no ztilt / QGL ") }
  {% endif %}
  
  {% set planeDef = printer.configfile.settings[planeCfg] %}
  {% set planeRange = planeDef.points | count             %}
  {% if not printer[planeCfg].applied  %} 
    { action_raise_error("Plane not leved, run {planeCMD} first")} {% endif %} 

  {% set moveSpeed  = planeDef['speed'] | int * 60  %}
  {% set moveAccel  = printer.configfile.config.printer.max_accel | int * 0.80 %}
  {% set moveHeight = 10 if planeDef['horizontal_move_z'] < 10 else planeDef['horizontal_move_z'] %}

  RESPOND PREFIX=💨 MSG="Moving Height: {moveHeight} Speed: {planeDef['speed']} Accel: {moveAccel} You have 4s to hit eStop"
  G4 P4000
  G90
  G0 Z{moveHeight}

  {% for i in range(planeRange) %}
    {% set testX = planeDef.points[i][0]|float %}
    {% set testY = planeDef.points[i][1]|float %}
    RESPOND PREFIX=🔢 MSG="Point {i+1}/{planeRange+1} ({planeCMD})"
    RESPOND PREFIX=📌 MSG="Tesing at X={testX} Y={testY}"

    G1 X{testX} Y{testY} Z{moveHeight} F{moveAccel}
    M400
    CARTOGRAPHER_ESTIMATE_BACKLASH
    M400
    G0 Z{moveHeight}
  {% endfor %}

  {% set posCenter = printer.configfile.config.bed_mesh.zero_reference_position %}
  {% set testX = posCenter.split(",")[0]|float %}
  {% set testY = posCenter.split(",")[1]|float %}
  RESPOND PREFIX=🚩 MSG="Point {planeRange+1}/{planeRange+1} (zero_reference_position)"
  RESPOND PREFIX=📌 MSG="Tesing at X={testX} Y={testY}"

  G1 X{testX} Y{testY} Z{moveHeight} F{moveAccel}
  M400
  CARTOGRAPHER_ESTIMATE_BACKLASH
  M400
  G0 Z{moveHeight}    


#####################################################################
#  Bed Leveling and Height Calibration Macro
#####################################################################
# Defines a G-code macro for bed leveling and height calibration
# The G32 macro is included with the stock configuration for most printers. This is typically 
# used as a “full home” process that will home and perform leveling / tilt adjustments.
[gcode_macro G32]
description: Home and Z Tilt Adjustment
gcode:
    BED_MESH_CLEAR                                                   # Clear bed mesh
    G28                                                              # Home all axes
    Z_TILT_ADJUST                                                    # Perform gantry leveling
    G28                                                              # Home all axes
    G0 X175 Y175 Z30 F3600                                           # Fast move to X150 Y150 Z30 at 3600 mm/min


#####################################################################
#  Probe Calibration 
#####################################################################      
# Defines a G-code macro for probe calibration
[gcode_macro SET_CARTOGRAPHER_Z_OFFSET]
description: Set Cartographer Z Offset
gcode:
    G28                                                              # Home all axes
    G0 X175 Y175 Z1 F3600                                            # Fast move to X150 Y150 Z1 at 3600 mm/min
    CARTOGRAPHER_CALIBRATE METHOD=manual                             # Start probe calibration    


#####################################################################
#  Enable Stepper Full Step
#####################################################################
[gcode_macro STEPPER_FULL_STEP]
description: Set Steppers in Full Step to Sync Manually
gcode:
    SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
    SET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1
    SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
    SET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1


#####################################################################
#  Motor Sync
#####################################################################
[gcode_macro MOTOR_SYNC]
description: Synchronize Motors
gcode:
# Homing Printer
    {% if "xyz" not in printer.toolhead.homed_axes %}
        SET_DISPLAY_TEXT MSG="Homing..."                             # Display Message
        G28                                                          # Homing all axes (if needed)	
    {% endif %}
    
    SYNC_MOTORS FORCE_RUN=1   


#####################################################################
#  Drop Bed
#####################################################################
[gcode_macro DROP_BED]
description: Move Bed down to lowest Level
gcode:
	{% set z = printer.toolhead.axis_maximum.z|float %}
	G28
	G0 Z{z}    


#####################################################################
#  Load Filament
#####################################################################   
[gcode_macro LOAD_FILAMENT]
description: Load Filament
variable_load_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state


#####################################################################
#  Unload Filament
##################################################################### 
[gcode_macro UNLOAD_FILAMENT]
description: Unload Filament
variable_unload_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state    


#####################################################################
#  Heat Soak Chamber
#####################################################################
[gcode_macro HEAT_SOAK]
description: Heat Bed and Perform Soak (Can be Canceled)
variable_target_chamber_temp: 0
variable_target_bed_temp: 0
variable_stage: None												 # heating -> soaking -> done -> None
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0
gcode:
	{% set CHAMBER = params.CHAMBER|default(50)|int %}               # Chamber temperature 
	{% set BED = params.BED|default(100)|int %}                      # Bed temperature
	{% set DURATION = (params.DURATION|default(5)|int) * 60 %}       # Minutes to Seconds
	{% set HOTEND = 150 %}                                           # Hotend temperature
	{% set chamber_temp = printer['temperature_sensor chamber_temperature'].temperature | float %}
     
    # Check if target_bed to target_chamber makes Sense, so target_chamber could not set higher than 70% of target_bed temp
	{% if BED < CHAMBER/0.70 %}
        G4 P5000												     # Pause 5000 ms (5 Sec)
		RESPOND TYPE=error MSG="Error! Bed Temp must be 30% above Chamber Temp!" 
        G4 P10000												     # Pause 10000 ms (10 Sec)
		CANCEL_HEAT_SOAK                                             # Cancel the actual running HEAT_SOAK
    {% else %}                                                       # Else everything in HEAT_Soak beacause it won´t CANCEL_HEAT_SOAK while in an Macro
        
        # Set Variables
        # User writeable variables
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_bed_temp		VALUE={ BED }
		SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_chamber_temp	VALUE={ CHAMBER }
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
        # Internal variables
		SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
		SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0
  
        # Homing and Set Fans
        RESPOND TYPE=echo MSG="Homing and Set Fans to 20%..."        # Display Message
		G28					                                         # Homing all axes (if needed)		
        M106 P99 S{ 0.2*255 }                                    	 # Turn ON Part/Chamber/Fume Fans to 20%
        
        # Wait for Chamber to reach target_chamber Temperature
        RESPOND TYPE=echo MSG="Start Heating Chamber to {CHAMBER}°C using {BED}°C Heat Bed... and {HOTEND}°C Hotend for {DURATION/60} Mins"
	    M140 S{BED}                                                  # Set target_bed Temperature (Do NOT wait)
        M104 S{HOTEND}                                               # Set target_hotend Temperature (Do NOT wait)
        
		UPDATE_DELAYED_GCODE ID=HEAT_SOAKER DURATION={ check_interval }
	{% endif %}

#####################################################################
#  UNSAVE Lower/Higher BED
#####################################################################

[gcode_macro UNSAFE_LOWER_BED50]
description: Lower the bed 50mm without homing
gcode:
  G90
  SET_KINEMATIC_POSITION Z=0
  G0 Z+50 F3000
  M84

[gcode_macro UNSAFE_LOWER_BED100]
description: Lower the bed 100mm without homing
gcode:
  G90
  SET_KINEMATIC_POSITION Z=0
  G0 Z+100 F3000
  M84

[gcode_macro UNSAFE_HIGHER_BED25]
description: Hogher the bed 25mm without homing
gcode:
  G90
  SET_KINEMATIC_POSITION Z=100
  _CLIENT_LINEAR_MOVE Z=-25 F=3000
  M84

#####################################################################
#  Cancel Heat Soak Chamber
#####################################################################
[gcode_macro CANCEL_HEAT_SOAK]
description: Cancel Heat Soak
gcode:
    RESPOND TYPE=error MSG="CANCEL Heat Soak"                          # Display Message
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'" # Set Variable ´cancel´
    UPDATE_DELAYED_GCODE ID=HEAT_SOAKER DURATION=1


#####################################################################
#  Heat Soaker (Soaking Activity)
#####################################################################    
[delayed_gcode HEAT_SOAKER]
# Internal Macro to handle Heat soaking Activity
gcode:
	{% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}
	{% set chamber_temp = printer['temperature_sensor chamber_temperature'].temperature | float %}
    
	# Update total time elapsed
	{% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
	SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    # Set Stage 
	{% set stage = heat_soak.stage %}

    # If Stage is "heating" and Heat Bed is at Target Temperature set stage "soaking"
	{% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_bed_temp %}
        {% set stage = "soaking" %}
	{% endif %}

    # If stage is "soaking"
	{% if stage == "soaking" %}
		# Update Soak Countdown
		{% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
		SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }
		{% if soak_time_remaining == 0 or chamber_temp >= heat_soak.target_chamber_temp %}
			{% set stage = "done" %}
		{% endif %}
    {% endif %}

    # Save Stage before calling any Macros
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    # If Stage is "done" or "cancel"
    {% if stage in ("done", "cancel") %}
		{% if stage == "cancel" %}
            {% set stage = "done" %}
		{% else %}
            RESPOND TYPE=echo MSG="Heat Soak COMPLETE after {total_time_elapsed/60.0} Mins" # Display Message
		{% endif %}
		SOAK_COMPLETE

		## reset all state vars, except stage, which may be queried via the api
		SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_chamber_temp	VALUE=0
		SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_bed_temp		VALUE=0
		SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining	VALUE=0
		SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed	VALUE=0

    {% else %}
		{% if total_time_elapsed % 60 < [heat_soak.check_interval, 58]|min %}
			## output status periodically
			{% if stage == "heating" %}
                RESPOND TYPE=echo MSG="Heating Bed to {heat_soak.target_bed_temp}°C since {total_time_elapsed/60} Min..."                                                                                # Display Message
			{% elif stage == "soaking" %}
				{% if soak_time_remaining > 0 %}
                    RESPOND TYPE=echo MSG="Soaking Chamber {chamber_temp}°C of {heat_soak.target_chamber_temp}°C using {heat_soak.target_bed_temp}°C Heat Bed... time left {soak_time_remaining/60} Min" # Display Message
				{% else %}
                    RESPOND TYPE=echo MSG="Soaking Chamber {chamber_temp}°C of {heat_soak.target_chamber_temp}°C using {heat_soak.target_bed_temp}°C Heat Bed... since {total_time_elapsed/60} Min"      # Display Message
				{% endif %}
			{% endif %}
		{% endif %}

		## trigger ourselves again
		UPDATE_DELAYED_GCODE ID=HEAT_SOAKER DURATION={ heat_soak.check_interval }

		## dwell for 1ms to prevent from going idle
		G4 P1

	{% endif %}


#####################################################################
#  Heat Soak Complete
#####################################################################
[gcode_macro SOAK_COMPLETE]
description: Finish Soak
gcode:
	G28					                                             # Homing all axes (if needed)	
    M106 P99 S0                                                      # Turn OFF Part/Chamber/Fume Fans
    TURN_OFF_HEATERS                                                 # Turn of Heat Bed and Nozzle


#####################################################################
#  Shaketune
#####################################################################
#https://github.com/Frix-x/klippain-shaketune/blob/main/docs/README.md
[shaketune]
 result_folder: ~/printer_data/config/ShakeTune_results
#    Path where the processed results will be stored. If the folder doesn't exist,
#    it will be automatically created. You can change this if you'd like to store 
#    results in a different location.
 number_of_results_to_keep: 10
#    This setting defines how many results you want to keep in the result folder.
#    Once the specified number is exceeded, older results will be automatically deleted
#    to free up space on the SD card and avoid cluttering the results folder.
 keep_raw_data: False
#    If set to True, Shake&Tune will store both the processed graphs and the raw accelerometer
#    .stdata files in the results folder. This can be useful for debugging or archiving purposes.
#    Please always attach them when reporting any issues on GitHub or Discord.
 show_macros_in_webui: True
#    Mainsail and Fluidd doesn't create buttons for system commands (macros that are not part
#    of the printer.cfg file). This option allow Shake&Tune to inject them into the webui at runtime.
#    If set to False, the macros will be hidden but still accessible from the console by typing
#    their names manually, which can be useful if you prefer to encapsulate them into your own macros.
 timeout: 600
#    This defines the maximum processing time (in seconds) to allows to Shake&Tune for generating 
#    graphs from a .stdata file. 10 minutes should be more than enough in most cases, but if you have
#    slower hardware (e.g., older SD cards or low-performance devices), increase it to prevent timeouts.
 measurements_chunk_size: 2
#    Each Shake&Tune command uses the accelerometer to take multiple measurements. By default,
#    Shake&Tune will write a chunk of data to disk every two measurements, and at the end of the
#    command will merge these chunks into the final .stdata file for processing. "2" is a very
#    conservative setting to avoid Klipper Timer Too Close errors on lower end devices with little
#    RAM, and should work for everyone. However, if you are using a powerful computer, you may
#    wish to increase this value to keep more measurements in memory (e.g., 15-20) before writing
#    the chunk and avoid stressing the filesystem too much.
 max_freq: 200
#    This setting defines the maximum frequency at which the calculation of the power spectral density
#    is cutoff. The default value should be fine for most machines and accelerometer combinations and
#    avoid touching it unless you know what you're doing.
 dpi: 300
#    Controls the resolution of the generated graphs. The default value of 300 dpi was optimized
#    and strikes a balance between performance and readability, ensuring that graphs are clear
#    without using too much RAM to generate them. Usually, you shouldn't need to change this value.


#####################################################################
#  Axis Twist Compensation
#####################################################################
[axis_twist_compensation]
#speed: 50
#   The speed (in mm/s) of non-probing moves during the calibration.
#   The default is 50.
#horizontal_move_z: 5
#   The height (in mm) that the head should be commanded to move to
#   just prior to starting a probe operation. The default is 5.
calibrate_start_x: 40
#   Defines the minimum X coordinate of the calibration
#   This should be the X coordinate that positions the nozzle at the starting
#   calibration position.
calibrate_end_x: 310
#   Defines the maximum X coordinate of the calibration
#   This should be the X coordinate that positions the nozzle at the ending
#   calibration position.
calibrate_y: 175
#   Defines the Y coordinate of the calibration
#   This should be the Y coordinate that positions the nozzle during the
#   calibration process. This parameter is recommended to
#   be near the center of the bed

# For Y-axis twist compensation, specify the following parameters:
calibrate_start_y: 21.1
#   Defines the minimum Y coordinate of the calibration
#   This should be the Y coordinate that positions the nozzle at the starting
#   calibration position for the Y axis. This parameter must be provided if
#   compensating for Y axis twist.
calibrate_end_y: 328.9
#   Defines the maximum Y coordinate of the calibration
#   This should be the Y coordinate that positions the nozzle at the ending
#   calibration position for the Y axis. This parameter must be provided if
#   compensating for Y axis twist.
calibrate_x: 175
#   Defines the X coordinate of the calibration for Y axis twist compensation
#   This should be the X coordinate that positions the nozzle during the
#   calibration process for Y axis twist compensation. This parameter must be
#   provided and is recommended to be near the center of the bed.


#####################################################################
#  Test Speed Macro 
#####################################################################
[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED  