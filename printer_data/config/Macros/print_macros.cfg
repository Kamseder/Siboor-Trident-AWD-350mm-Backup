#Macros used for Printing 

#####################################################################
#  Print Start
#####################################################################
[gcode_macro PRINT_START] 
# Use PRINT_START for the slicer starting script - please customise for your slicer of choice
description: Common Start Print routine
variable_adaptive_mesh: "'false'"
gcode:
    # This part fetches data from your slicer. Such as bed, extruder, and chamber temps and size of your printer
    # PRINT_START HOTEND=[nozzle_temperature_initial_layer] BED=[bed_temperature_initial_layer_single] CHAMBER=[overall_chamber_temperature] PRIMING=true BEDMESH=false ADAPTIVE=true
    {% set target_bed = params.BED|int %}                            # Target bed temperature from Slicer Start
    {% set target_hotend = params.HOTEND|int %}                      # Target Hotend temperature from Slicer Start
    {% set target_chamber = params.CHAMBER|int %}                    # Target chamber temperature from Slicer Start
    {% set priming = params.PRIMING|default('true')|lower %}         # Priming the Nozzle from Slicer Start
	{% set force_bedmesh = params.BEDMESH|default('false')|lower %}  # Force Bed Mesh if none is loaded
	{% set adaptive = params.ADAPTIVE|default('true')|lower %}       # Adaptive Bed Mesh from Slicer Start
	{% set he_safe = 150 %}                                          # Hotend Safe Temperature
    {% set x_safe = printer.toolhead.axis_maximum.x|float / 2 %}     # Bed center X Safe
    {% set y_safe = printer.toolhead.axis_maximum.y|float / 2 %}     # Bed center Y Safe
    {% set z_safe = 15 %}                                            # Toolhead to Bed Safe

    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=adaptive_mesh		VALUE="'{adaptive}'"  # Save Adaptive Bed Mesh to Global variable so we can clear bedmesh in PRINT_END
    SET_GCODE_OFFSET Z=0                                 			                      # Set offset to 0

    # Homing Printer
    SET_DISPLAY_TEXT MS="Homing..."                                  # Display Message
    G28                                                              # Homing all axes (if needed)	
    G90                                                              # Set to absolute positioning
    
    # Check if target_bed to target_chamber makes Sense, so target_chamber could not set higher than 70% of target_bed temp
	{% if target_bed < target_chamber/0.70 %} 
        SET_DISPLAY_TEXT MSG="Error! Bed Temp must be 30% above Chamber Temp!"
        G4 P20000												     # Pause 20000 ms (20 Sec)
		CANCEL_PRINT                                                 # Cancel the actual running print
    {% else %}                                                       # Else everything in PRINT_START beacause it won´t CANCEL_PRINT while in an Macro 
    
        # Force bed_mesh if none is loaded.
        {% if not printer['bed_mesh'].profile_name %}                # If no bed_mesh could Load
            SET_DISPLAY_TEXT MSG="No Bed Mesh loaded...forcing."     # Display Message
            G4 P2000												 # Pause 2000 ms (2 Sec)
    		{% set force_bedmesh = 'true' %}                         # Set force_bed_mesh true
    	{% endif %}

        # Clear Old saved bed_mesh (If there is any)
        {% if force_bedmesh == 'true' %}                             # If force_bed_mesh true
            SET_DISPLAY_TEXT MSG="Clearing Bed Mesh..."              # Display Message
    		BED_MESH_CLEAR                                           # Clear Bed Mesh
            G4 P2000												 # Pause 2000 ms (2 Sec)
    	{% endif %}

        # Start Heating the Chamber to target_chamber
        {% if target_chamber == 0 %}                                 # If target_chamber or max_chamber is 0, do nothing
            SET_DISPLAY_TEXT MSG="Heating Chamber not needet, Start Heating Head Bed to {target_bed}°C..."  # Display Message
            G1 X{x_safe} Y{y_safe} Z{z_safe} F9000                   # Go to Center of the Bed 
    	    M140 S{target_bed}								    	 # Set target_bed Temperature (Do NOT wait)
            G4 P2000										         # Pause 2000 ms (2 Sec)
        {% else %}
            SET_DISPLAY_TEXT MSG="Start Heating Chamber to {target_chamber}°C using {target_bed}°C Heat Bed..."  # Display Message
    	    G1 X{x_safe} Y{y_safe} Z{z_safe} F9000                   # Go to Center of the Bed 
    	    M140 S{target_bed}								    	 # Set target_bed Temperature (Do NOT wait)
            M106 P99 S{ 0.2*255 }                                    # Turn ON Part/Chamber/Fume Fans to 20%
            G4 P2000											     # Pause 2000 ms (2 Sec)
        {% endif %}

        # Start SYNC_MOTORS While Heating Chamber/Bed
        {% if not printer.motors_sync.applied %}                     # If already performed a SYNC_MOTORS in the session it Skips
            SET_DISPLAY_TEXT MSG="Motor Sync while Heating Bed..."   # Display Message
    		M106 P99 S0                                  		     # Turn OFF Part/Chamber/Fume Fans to Reduce Noice and Vibrations while SYNC_MOTORS
    		SYNC_MOTORS												 # Call SYNC_MOTORS routine while Heating
            M400                                                     # Wait for current Moves to Finish    
            M106 P99 S{ 0.2*255 }                                    # Turn ON Part/Chamber/Fume Fans to 20%
    	{% endif %}

        # Start Heating Hotend to Safe Temperature
        SET_DISPLAY_TEXT MSG="Start Heating Hotend to {he_safe}°C"   # Display Message
        G4 P2000											    	 # Pause 2000 ms (2 Sec)
        M104 S{he_safe}                                              # Set he_safe Temperature (Do NOT wait)

        # Wait for Heat Bed to reach target Temperature
        SET_DISPLAY_TEXT MSG="Waiting for Heat Bed to reach {target_bed}°C"             # Display Message
        G1 X{x_safe} Y{y_safe} Z{z_safe} F9000                		                    # Go to Center of the Bed
        G4 P2000									                        			# Pause 2000 ms (2 Sec)
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={target_bed}	MAXIMUM={target_bed+2}  # Wait for target_bed Temperature +-2°C

        # Level Heat Bed using Z_TILT_ADJUST
        {% if not printer['z_tilt'].applied %}                       # If already performed a Z_TILT_ADJUST in the session it Skips
            SET_DISPLAY_TEXT MSG="Level Heat Bed..."                 # Display Message
    		Z_TILT_ADJUST                                      		 # Level the Bed using Z_TILT_ADJUST
    		M400												     # Wait for current Moves to Finish    
    	{% endif %}

        # Make a Bed Mesh
        {% if force_bedmesh == 'true' %}                             # If force_bedmesh set to true
    		{% if adaptive == 'true' %}                              # and adaptive set to true
    			SET_DISPLAY_TEXT MSG="Run Adaptive Bed Mesh..."      # Display Message
    			BED_MESH_CALIBRATE ADAPTIVE=1                        # Start the adaptive bed mesh
    		{% else %}                              
    			SET_DISPLAY_TEXT MSG="Run Complete Bed Mesh..."      # Display Message
    			BED_MESH_CALIBRATE                               	 # Start the full bed mesh
    		{% endif %}
    		M400													 # Wait for current Moves to Finish
    	{% endif %}

        # Wait for Hotend to reach he_safe Temperature
        SET_DISPLAY_TEXT MSG="Waiting for Hotend to reach {he_safe}°C"          # Display Message
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={he_safe} MAXIMUM={he_safe+2}  # Wait for he_safe Temperature

        # Clean Nozzle
        CLEAN_NOZZLE                                                 #Clean Nozzle

        # Calibrate Z Offset with he_safe Hot Nozzle
        SET_DISPLAY_TEXT MSG="Calibrating Z Offset..."               # Display Message
        M106 P99 S0                                  		         # Turn OFF Part/Chamber/Fume Fans to Reduce Noice and Vibrations while CARTOGRAPHER_TOUCH 
        CARTOGRAPHER_TOUCH                                  		 # Calibrate Z Offset (Only with Hot Nozzle)
        M106 P99 S{ 0.2*255 }                                        # Turn ON Part/Chamber/Fume Fans to 20%
    	M400													     # Wait for current Moves to Finish
    
        # Wait for Chamber to reach target_chamber Temperature 
        SET_DISPLAY_TEXT MSG="Waiting for Chamber to reach {target_chamber}°C"                     # Display Message
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber_temperature" MINIMUM={target_chamber}  # Wait for target_chamber Temperature

        # Wait for Hotend to reach target_hotend Temperature
        G1 X{x_safe} Y{y_safe} Z{z_safe} F9000                		                        # Go to Center of the Bed
        SET_DISPLAY_TEXT MSG="Waiting for Hotend to reach {target_hotend}°C"                # Display Message
        M106 P99 S0                                                                         # Turn OFF Part/Chamber/Fume Fans
        M104 S{target_hotend}                                                               # Set target_hotend Temperature
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={target_hotend} MAXIMUM={target_hotend+2}  # Wait for target_hotend Temperature
        G4 P5000    										                                # Pause 5000 ms (5 Sec) to Heatsoak Nozzle

        # Get ready to Print by doing a Primeline                                       
    	{% if priming == 'true' %}                                   # If priming set to true
            SET_DISPLAY_TEXT MSG="Draw Priming Lines..."             # Display Message
      		DRAW_PRIMING_LINES                                       # DRAW_PRIMING_LINES
    	{% endif %}
        
    	G90                                           				 # Set to absolute positioning

        SET_DISPLAY_TEXT MSG="Printing..."                           # Display Message
    
	{% endif %}                                                      # End Everything after CANCEL_PRINT


#####################################################################
#  Print Cancel
#####################################################################
[gcode_macro CANCEL_PRINT]
# Defines a G-code macro to cancel the actual running print
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode: 
    SET_DISPLAY_TEXT MSG="Cancel Print..."                           # Display Message
    G4 P2000								                         # Pause 2000 ms (2 Sec)
    PRINT_END                                                        # Use PRINT_END Macro
    SET_DISPLAY_TEXT MSG="Print Canceled..."                         # Display Message
    CANCEL_PRINT_BASE                                                # Call CANCEL_PRINT_BASE to cancel print


#####################################################################
#  Print End
#####################################################################
[gcode_macro PRINT_END]
# Defines a G-code macro to End the actual running print
description: Common End Print routine
gcode:
    {% set pth = printer.toolhead %}                                                                  # Rename printer.toolhead to p.th for shorter Lines
    {% set x_safe = pth.position.x + 20 * (1 if pth.axis_maximum.x - pth.position.x > 60 else -1) %}  # Move Toolhead X +20mm if there is less space then +60mm move -20mm
    {% set y_safe = pth.position.y + 20 * (1 if pth.axis_maximum.y - pth.position.y > 60 else -1) %}  # Move Toolhead Y +20mm if there is less space then +60mm move -20mm
    {% set z_safe = [pth.position.z + 15, pth.axis_maximum.z]|min %}                                  # Move Toolhead Z +15mm but max Z Maximum 
    #{% set x_park = pth.axis_maximum.x|float / 2 %}                                                  # X center Park
    {% set x_park = pth.axis_maximum.x|float - 2 %}                                                   # Move Toolhead X Maximum -5mm
    {% set y_park = pth.axis_maximum.y|float - 5 %}                                                   # Move Toolhead Y Maximum -5mm
    {% set adaptive = printer['gcode_macro PRINT_START'].adaptive_mesh|lower %}                       # Adaptive Bed Mesh from PRINT_START Macro 
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=adaptive_mesh		VALUE="''"  # Clear Adaptive Bed Mesh to Global Variable so we can clear Bed Mesh in PRINT_END

    SET_DISPLAY_TEXT MSG="Print End..."                              # Display Message
    M400												             # Wait for current Moves to Finish
    G92 E0                                                           # Zero the extruder
    
    {% if printer['extruder'].can_extrude|lower == 'true' %}         # If extruder can extrude (defined by min_extrude_temp)
        SET_DISPLAY_TEXT MSG="Retract Filament..."                   # Display Message
		G1 E-20.0 F3600                								 # Retract Filament 20mm at 3600 mm/min
    {% else %}
        SET_DISPLAY_TEXT MSG="Extruder not Hot enough to Retract..." # Display Message
        G4 P2000								                     # Pause 2000 ms (2 Sec)    
	{% endif %}                                                  
    
    TURN_OFF_HEATERS                                                 # Turn of Heat Bed and Nozzle
    
    G90                                           				     # Set to absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000                          # Move Toolhead to remove stringing
    G0 X{x_park} Y{y_park} F3600                                     # Park Toolhead at rear middle
    M106 P99 S0                                                      # Set Fans Off (See M106 Macro)
    M106 P3 S{255*0.30}                                              # Turn ON Fume Fans to 30%
    _START_FUME_PACK_STOP_TIMER TIME=300                             # Start Fume Pack Stop Timer 300 s (5 Min)

    {% if adaptive == 'true' %}                                      # If Adaptive Bed Mesh set to True
		BED_MESH_CLEAR                                               # Clear Bed Mesh
	{% endif %}
    
    SET_DISPLAY_TEXT MSG="Print Finished..."                         # Display Message
    
    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0  


#####################################################################
#  Print Pause
#####################################################################  
[gcode_macro PAUSE]
description: Pause the Print
rename_existing: PAUSE_BASE
gcode:
    {% set pth = printer.toolhead %}                                                                  # Rename printer.toolhead to p.th for shorter Lines
    {% set x_safe = pth.position.x + 20 * (1 if pth.axis_maximum.x - pth.position.x > 20 else -1) %}  # Move Toolhead X +20mm if there is less space then +20mm move -20mm
    {% set y_safe = pth.position.y + 20 * (1 if pth.axis_maximum.y - pth.position.y > 20 else -1) %}  # Move Toolhead Y +20mm if there is less space then +20mm move -20mm
    {% set z_safe = [pth.position.z + 15, pth.axis_maximum.z]|min %}                                  # Move Toolhead Z +15mm but max Z Maximum 
    #{% set x_park = pth.axis_maximum.x|float / 2 %}                                                  # X center Park
    {% set x_park = pth.axis_maximum.x|float - 2 %}                                                   # Move Toolhead X Maximum -5mm
    {% set y_park = pth.axis_maximum.y|float - 5 %}                                                   # Move Toolhead Y Maximum -5mm
  
    PAUSE_BASE                                                       # Set Status Pause
    G92 E0                                                           # Zero the extruder

    {% if printer['extruder'].can_extrude|lower == 'true' %}         # If extruder can extrude (defined by min_extrude_temp)
        SET_DISPLAY_TEXT MSG="Retract Filament..."                   # Display Message
    	G1 E-20.0 F3600                								 # Retract Filament 20mm at 3600 mm/min
    {% else %}
        SET_DISPLAY_TEXT MSG="Extruder not Hot enough to Retract..." # Display Message
        G4 P2000								                     # Pause 2000 ms (2 Sec)
	{% endif %}                                             

    G90
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000                          # Move Toolhead to remove stringing
    G0 X{x_park} Y{y_park} F3600                                     # Park Toolhead at rear middle
    M106 P0                                                          # Set Part Fan Off (See M106 Macro)
    M106 P2                                                          # Set Bed Fan Off (See M106 Macro)

    
#####################################################################
#  Resume Pause
#####################################################################  
[gcode_macro RESUME]
description: Resume the Print
rename_existing: RESUME_BASE
gcode:
  
    {% if 'VELOCITY' in params|upper %}
        {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
        {% set get_params = "" %}
    {% endif %}
  
    {% if printer['extruder'].can_extrude|lower == 'true' %}         # If extruder can extrude (defined by min_extrude_temp)
        SET_DISPLAY_TEXT MSG="Extract Filament..."                   # Display Message
    	G1 E+20.0 F3600                								 # Extract Filament 20mm at 3600 mm/min
    {% else %}
        SET_DISPLAY_TEXT MSG="Extruder not Hot enough to Extract..." # Display Message
        G4 P2000								                     # Pause 2000 ms (2 Sec)
	{% endif %}                                             
    
    RESUME_BASE {get_params}                                         # Set Status Resume and get Printing parameters


#####################################################################
#  Priming Lines
#####################################################################
[gcode_macro DRAW_PRIMING_LINES]
description: Purge lines at front of Heat Bed
gcode:
	SET_DISPLAY_TEXT MSG="Priming Nozzle..."                         # Display Message 

    {% if printer['extruder'].can_extrude|lower == 'true' %}         # If extruder can extrude (defined by min_extrude_temp)
        SET_DISPLAY_TEXT MSG="Extract Filament..."                   # Display Message
    	G1 E+20.0 F3600                								 # Extract Filament 20mm at 3600 mm/min
    {% else %}
        SET_DISPLAY_TEXT MSG="Extruder not Hot enough to Extract..." # Display Message
        G4 P2000								                     # Pause 2000 ms (2 Sec)
	{% endif %}
    
    M83                                                              # Use relative Distances for Extrusion
    G92 E0                                                           # Reset Extruder
    G1 Z2.0 F3000                                                    # Move Z Axis up
    G1 X270   Y5 Z0.28 F7200.0                                       # Move to start position
    G1 X80    Y5 Z0.28 F1500.0 E32                                   # Draw the first line
    G1 X80    Y6 Z0.28 F7200.0                                       # Move to side a little
    G1 X260   Y6 Z0.28 F1500.0 E32                                   # Draw the second line
    G92 E0                                                           # Reset Extruder
    G90                                                              # Set to absolute positioning   






    